component displayname="ToolCreator" {
    
    /**
     * Tool for creating new tools dynamically!
     * This is the meta-tool that enables self-improvement
     */
    
    public struct function executeTool(required string toolName, required struct args) {
        try {
            switch(arguments.toolName) {
                case "createTool":
                    return createNewTool(arguments.args);
                    
                case "addToolRegistration":
                    return addToolRegistration(arguments.args);
                    
                default:
                    throw(type="ToolNotFound", message="Unknown tool creator function: #arguments.toolName#");
            }
            
        } catch (any e) {
            return {
                "content": [{
                    "type": "text",
                    "text": "Error in tool creator: #e.message#"
                }],
                "isError": true
            };
        }
    }
    
    private struct function createNewTool(required struct args) {
        validateRequiredParams(arguments.args, ["toolName", "description", "code"]);
        
        var toolName = arguments.args.toolName;
        var fileName = toolName & "Tool.cfc";
        var filePath = expandPath("/mcpcfc/tools/" & fileName);
        
        // Generate the tool component code
        var toolCode = 'component displayname="#toolName#Tool" {
    
    /**
     * #arguments.args.description#
     * Auto-generated by ToolCreator
     */
    
    public struct function executeTool(required string toolName, required struct args) {
        try {
            switch(arguments.toolName) {
                case "#lCase(toolName)#":
                    return execute#toolName#(arguments.args);
                    
                default:
                    throw(type="ToolNotFound", message="Unknown tool: ##arguments.toolName##");
            }
            
        } catch (any e) {
            return {
                "content": [{
                    "type": "text",
                    "text": "Error executing tool: ##e.message##"
                }],
                "isError": true
            };
        }
    }
    
    private struct function execute#toolName#(required struct args) {
        #arguments.args.code#
    }
    
    private void function validateRequiredParams(required struct args, required array required) {
        for (var param in arguments.required) {
            if (!structKeyExists(arguments.args, param) || len(trim(arguments.args[param])) == 0) {
                throw(type="InvalidParams", message="Missing required parameter: ##param##");
            }
        }
    }
}';
        
        // Write the new tool file
        fileWrite(filePath, toolCode);
        
        return {
            "content": [{
                "type": "text",
                "text": "Successfully created new tool: #toolName#Tool.cfc at #filePath#. Remember to add the tool registration to Application.cfc and restart Claude Desktop!"
            }]
        };
    }
    
    private struct function addToolRegistration(required struct args) {
        validateRequiredParams(arguments.args, ["toolName", "description", "inputSchema"]);
        
        var registrationCode = '
// Auto-generated tool registration
application.toolRegistry.registerTool("#lCase(arguments.args.toolName)#", {
    "description": "#arguments.args.description#",
    "inputSchema": #serializeJson(arguments.args.inputSchema)#
});';
        
        return {
            "content": [{
                "type": "text",
                "text": "Add this registration code to your Application.cfc registerTools() function:#chr(10)##chr(10)##registrationCode#"
            }]
        };
    }
    
    private void function validateRequiredParams(required struct args, required array required) {
        for (var param in arguments.required) {
            if (!structKeyExists(arguments.args, param) || len(trim(arguments.args[param])) == 0) {
                throw(type="InvalidParams", message="Missing required parameter: #param#");
            }
        }
    }
}